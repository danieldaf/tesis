// Generated by CoffeeScript 1.6.3
var barHChart;

barHChart = function() {
  var colors, domainX, height, idTagInsert, labelAxisX, margins, metricUnit, result, semanticColors, title, titleLegend, width, widthLegend, _line, _svg, _svgData, _svgLegend, _x;
  result = function() {};
  result.updateBars = function() {};
  result.updateSeries = function(datosSeries) {
    var barDato, barDatos, bars, dato, item, texts, valores, _i, _j, _len, _len1, _ref, _y, _y2;
    _y = d3.scale.linear().domain([0, datosSeries.length]).range([height, 0]);
    _y2 = d3.scale.linear().domain([0, colors.length + 1]).range([0, -_y(1) + _y(0)]);
    texts = _svgData.selectAll("text").data(datosSeries, function(d) {
      return d.name;
    });
    texts.enter().append("text").attr("x", "-1ex").attr("y", function(d, i) {
      return _y(i + 0.5);
    }).attr("text-anchor", "end").text(function(d) {
      return d.name;
    });
    barDatos = [];
    for (_i = 0, _len = datosSeries.length; _i < _len; _i++) {
      barDato = datosSeries[_i];
      _ref = barDato.data;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        dato = _ref[_j];
        item = {
          name: barDato.name + ":" + dato,
          data: dato
        };
        barDatos = barDatos.concat(item);
      }
      item = {
        name: barDato.name + ":null",
        data: -1
      };
      barDatos = barDatos.concat(item);
    }
    bars = _svgData.selectAll("path").data(barDatos, function(d) {
      return d.name;
    });
    bars.enter().append("path").attr("stroke", function(d) {
      if (d.data === -1) {
        return "transparent";
      } else {
        return "black";
      }
    }).attr("fill", function(d, i) {
      if (d.data === -1) {
        return "transparent";
      } else {
        return colors[i % (colors.length + 1)];
      }
    }).attr("stroke-width", 1).attr("d", function(d, i) {
      var a, x1, x2, y1, y2;
      x1 = 0;
      y1 = height - _y2(i + 0.5) - 2;
      if (d.data === -1) {
        x2 = 0;
      } else {
        x2 = _x(d.data);
      }
      y2 = height - _y2(i + 1.5) + 2;
      return a = "M" + x1 + "," + y1 + "L" + x2 + "," + y1 + "L" + x2 + "," + y2 + "L" + x1 + "," + y2 + "L" + x1 + "," + y1 + "z";
    });
    valores = _svgData.selectAll("text .textValor").data(barDatos, function(d) {
      return d.name;
    });
    return valores.enter().append("text").attr("x", function(d) {
      return _x(d.data) + 5;
    }).attr("y", function(d, i) {
      return height - _y2(i + 0.8);
    }).attr("font-size", "11px").attr("text-anchor", "start").text(function(d) {
      if (d.data === -1) {
        return "";
      } else {
        return d.data + " " + metricUnit;
      }
    });
  };
  width = 640;
  height = 480;
  margins = {
    left: 150,
    right: 50,
    top: 50,
    bottom: 50
  };
  title = "Grafico";
  labelAxisX = "Eje X";
  domainX = [];
  metricUnit = "";
  colors = [];
  semanticColors = [];
  titleLegend = "Leyenda";
  widthLegend = 200;
  idTagInsert = "chart";
  result.idTagInsert = function(value) {
    if (!arguments.length) {
      return idTagInsert;
    } else {
      idTagInsert = value;
      return result;
    }
  };
  result.width = function(value) {
    if (!arguments.length) {
      return width;
    } else {
      width = value;
      return result;
    }
  };
  result.height = function(value) {
    if (!arguments.length) {
      return height;
    } else {
      height = value;
      return result;
    }
  };
  result.margins = function(value) {
    if (!arguments.length) {
      return margins;
    } else {
      margins = value;
      return result;
    }
  };
  result.title = function(value) {
    if (!arguments.length) {
      return title;
    } else {
      title = value;
      return result;
    }
  };
  result.labelAxisX = function(value) {
    if (!arguments.length) {
      return labelAxisX;
    } else {
      labelAxisX = value;
      return result;
    }
  };
  result.titleLegend = function(value) {
    if (!arguments.length) {
      return titleLegend;
    } else {
      titleLegend = value;
      return result;
    }
  };
  result.widthLegend = function(value) {
    if (!arguments.length) {
      return widthLegend;
    } else {
      widthLegend = value;
      return result;
    }
  };
  result.domainX = function(value) {
    if (!arguments.length) {
      return domainX;
    } else {
      domainX = value;
      return result;
    }
  };
  result.metricUnit = function(value) {
    if (!arguments.length) {
      return metricUnit;
    } else {
      metricUnit = value;
      return result;
    }
  };
  result.colors = function(value) {
    if (!arguments.length) {
      return colors;
    } else {
      colors = value;
      return result;
    }
  };
  result.semanticColors = function(value) {
    if (!arguments.length) {
      return semanticColors;
    } else {
      semanticColors = value;
      return result;
    }
  };
  _svg = function() {};
  _x = function() {};
  _svgLegend = function() {};
  _svgData = function() {};
  _line = function() {};
  result.build = function() {
    var relacionTicksX, svgColors, svgTexts, ticksCountX, ticksSugeridosX, xAxis, _fondoV;
    _x = d3.scale.linear().domain([domainX[0], domainX[domainX.length - 1]]).range([0, width]);
    _line = d3.svg.line().interpolate("linear").x(function(d, i) {
      return _x(domainX[i]);
    });
    _svg = d3.select("div#" + idTagInsert).attr("style", "display:block").append("svg").attr("id", idTagInsert).attr("width", width + margins.left + margins.right + widthLegend).attr("height", height + margins.top + margins.bottom);
    ticksCountX = domainX.length;
    relacionTicksX = Math.round(width / ticksCountX);
    ticksSugeridosX = Math.round(width / 30);
    if (relacionTicksX < 30) {
      ticksCountX = ticksSugeridosX;
    }
    xAxis = d3.svg.axis().scale(_x).tickValues(_x.ticks(ticksCountX)).orient("bottom");
    _svg.append("g").attr("transform", "translate(" + margins.left + ", " + (height + margins.top) + ")").attr("class", "axis").call(xAxis).select("text").attr("x", width / 2).attr("text-anchor", "middle").attr("dy", "25px").text(labelAxisX);
    _svg.append("g").attr("transform", "translate(" + margins.left + ", " + (height + margins.top) + ")").attr("class", "axis").append("line").attr("x1", 0).attr("y1", 0).attr("x2", 0).attr("y2", -height);
    _svg.append("g").attr("transform", "translate(" + (margins.left + width / 3) + ", 15)").attr("class", "title").append("text").text(title);
    _fondoV = _svg.append("g").attr("transform", "translate(" + margins.left + ", " + margins.top + ")").attr("class", "fondo");
    _fondoV.selectAll("line").data(domainX).enter().append("line").attr("x1", _x).attr("y1", 0).attr("x2", _x).attr("y2", height);
    _svgLegend = _svg.append("g").attr("transform", "translate(" + (margins.left + width + 25) + ", " + margins.top + ")");
    _svgLegend.append("text").text(titleLegend);
    _svgLegend = _svg.append("g").attr("id", "leyenda").attr("transform", "translate(" + (margins.left + width + 25) + ", " + margins.top + ")");
    svgColors = _svgLegend.selectAll("rect").data(semanticColors);
    svgColors.attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    });
    svgColors.enter().append("rect").attr("x", "10").attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    }).attr("width", "20").attr("height", "20").attr("stroke", "#000").attr("stroke-width", "1").attr("fill", function(d, i) {
      return colors[i];
    }).attr("stroke-opacity", "1").attr("fill-opacity", "1");
    svgColors.exit().remove();
    svgTexts = _svgLegend.selectAll("text").data(semanticColors);
    svgTexts.attr("x", 10 + 20 + 5).attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    });
    svgTexts.enter().append("text").attr("x", 10 + 20 + 5).attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    }).attr("dy", "13px").text(function(d, i) {
      return semanticColors[i];
    }).attr("stroke-opacity", "1").attr("fill-opacity", "1");
    svgTexts.exit().remove();
    _svgData = _svg.append("g").attr("id", "series").attr("transform", "translate(" + margins.left + ", " + margins.top + ")");
    return result;
  };
  return result;
};
