// Generated by CoffeeScript 1.6.3
var lineChart;

lineChart = function() {
  var domainX, domainY, height, idTagInsert, labelAxisX, labelAxisY, margins, result, title, titleLegend, width, widthLegend, _fondoH, _fondoV, _line, _svg, _svgData, _svgLegend, _x, _y;
  result = function() {};
  result.updateSeries = function(datosSeries) {
    var paths, svgColors, svgTexts;
    paths = _svgData.selectAll("path").data(datosSeries, function(d) {
      return d.name;
    });
    paths.enter().append("path").attr("stroke", function(d) {
      return d.color;
    }).attr("stroke-width", 1).attr("fill", "none").style("stroke-opacity", "1");
    paths.attr("d", function(d) {
      return _line(d.data);
    });
    paths.exit().remove();
    svgColors = _svgLegend.selectAll("rect").data(datosSeries, function(d) {
      return d.name;
    });
    svgColors.transition().delay(function(d, i) {
      return i * 100;
    }).duration(500).attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    });
    svgColors.enter().append("rect").attr("x", "10").attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    }).attr("width", "20").attr("height", "20").attr("stroke", "#000").attr("stroke-width", "1").attr("fill", function(d) {
      return d.color;
    }).attr("stroke-opacity", "1").attr("fill-opacity", "1");
    svgColors.exit().remove();
    svgTexts = _svgLegend.selectAll("text").data(datosSeries, function(d) {
      return d.name;
    });
    svgTexts.attr("x", 10 + 20 + 5).attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    });
    svgTexts.enter().append("text").attr("x", 10 + 20 + 5).attr("y", function(d, i) {
      return 10 + (20 + 5) * i;
    }).attr("dy", "13px").text(function(d) {
      return d.name;
    }).attr("stroke-opacity", "1").attr("fill-opacity", "1");
    return svgTexts.exit().remove();
  };
  width = 640;
  height = 480;
  margins = {
    left: 50,
    right: 50,
    top: 50,
    bottom: 50
  };
  title = "Grafico";
  labelAxisX = "Eje X";
  labelAxisY = "Eje Y";
  domainX = [];
  domainY = [];
  titleLegend = "Leyenda";
  widthLegend = 200;
  idTagInsert = "chart";
  result.idTagInsert = function(value) {
    if (!arguments.length) {
      return idTagInsert;
    } else {
      idTagInsert = value;
      return result;
    }
  };
  result.width = function(value) {
    if (!arguments.length) {
      return width;
    } else {
      width = value;
      return result;
    }
  };
  result.height = function(value) {
    if (!arguments.length) {
      return height;
    } else {
      height = value;
      return result;
    }
  };
  result.margins = function(value) {
    if (!arguments.length) {
      return margins;
    } else {
      margins = value;
      return result;
    }
  };
  result.title = function(value) {
    if (!arguments.length) {
      return title;
    } else {
      title = value;
      return result;
    }
  };
  result.labelAxisX = function(value) {
    if (!arguments.length) {
      return labelAxisX;
    } else {
      labelAxisX = value;
      return result;
    }
  };
  result.labelAxisY = function(value) {
    if (!arguments.length) {
      return labelAxisY;
    } else {
      labelAxisY = value;
      return result;
    }
  };
  result.titleLegend = function(value) {
    if (!arguments.length) {
      return titleLegend;
    } else {
      titleLegend = value;
      return result;
    }
  };
  result.widthLegend = function(value) {
    if (!arguments.length) {
      return widthLegend;
    } else {
      widthLegend = value;
      return result;
    }
  };
  result.domainX = function(value) {
    if (!arguments.length) {
      return domainX;
    } else {
      domainX = value;
      return result;
    }
  };
  result.domainY = function(value) {
    if (!arguments.length) {
      return domainY;
    } else {
      domainY = value;
      return result;
    }
  };
  _svg = function() {};
  _x = function() {};
  _y = function() {};
  _fondoH = function() {};
  _fondoV = function() {};
  _svgLegend = function() {};
  _svgData = function() {};
  _line = function() {};
  result.build = function() {
    var relacionTicksX, relacionTicksY, ticksCountX, ticksCountY, ticksSugeridosX, ticksSugeridosY, xAxis, yAxis;
    _x = d3.scale.linear().domain([domainX[0], domainX[domainX.length - 1]]).range([0, width]);
    _y = d3.scale.linear().domain([domainY[0], domainY[domainY.length - 1]]).range([height, 0]);
    _line = d3.svg.line().interpolate("linear").x(function(d, i) {
      return _x(domainX[i]);
    }).y(_y);
    _svg = d3.select("div#" + idTagInsert).attr("style", "display:block").append("svg").attr("id", idTagInsert).attr("width", width + margins.left + margins.right + widthLegend).attr("height", height + margins.top + margins.bottom);
    ticksCountX = domainX.length;
    ticksCountY = domainY.length;
    relacionTicksX = Math.round(width / ticksCountX);
    relacionTicksY = Math.round(height / ticksCountY);
    ticksSugeridosX = Math.round(width / 30);
    ticksSugeridosY = Math.round(height / 20);
    if (relacionTicksX < 30) {
      ticksCountX = ticksSugeridosX;
    }
    if (relacionTicksY < 20) {
      ticksCountY = ticksSugeridosY;
    }
    xAxis = d3.svg.axis().scale(_x).tickValues(_x.ticks(ticksCountX)).orient("bottom");
    yAxis = d3.svg.axis().scale(_y).tickValues(_y.ticks(ticksCountY)).orient("left");
    _svg.append("g").attr("transform", "translate(" + margins.left + ", " + (height + margins.top) + ")").attr("class", "axis").call(xAxis).select("text").attr("x", width / 2).attr("text-anchor", "middle").attr("dy", "25px").text(labelAxisX);
    _svg.append("g").attr("transform", "translate(" + margins.left + ", " + margins.top + ")").attr("class", "axis").call(yAxis).select("text").attr("transform", "rotate(-90)").attr("dy", "-25px").attr("text-anchor", "middle").attr("x", height / 2).text(labelAxisY);
    _fondoH = _svg.append("g").attr("transform", "translate(" + margins.left + ", " + margins.top + ")").attr("class", "fondo");
    _fondoH.selectAll("line").data(domainY.slice(1, +(domainY.length - 2) + 1 || 9e9)).enter().append("line").attr("x1", _x(domainX[0])).attr("y1", _y).attr("x2", _x(domainX[domainX.length - 1])).attr("y2", _y);
    _fondoV = _svg.append("g").attr("transform", "translate(" + margins.left + ", " + margins.top + ")").attr("class", "fondo");
    _fondoV.selectAll("line").data(domainX.slice(1, +(domainX.length - 2) + 1 || 9e9)).enter().append("line").attr("x1", _x).attr("y1", _y(domainY[0])).attr("x2", _x).attr("y2", _y(domainY[domainY.length - 1]));
    _svg.append("g").attr("transform", "translate(" + (margins.left + width / 3) + ", 15)").attr("class", "title").append("text").text(title);
    _svgLegend = _svg.append("g").attr("transform", "translate(" + (margins.left + width + 25) + ", " + margins.top + ")");
    _svgLegend.append("text").text(titleLegend);
    _svgLegend = _svg.append("g").attr("id", "leyenda").attr("transform", "translate(" + (margins.left + width + 25) + ", " + margins.top + ")");
    _svgData = _svg.append("g").attr("id", "series").attr("transform", "translate(" + margins.left + ", " + margins.top + ")");
    return result;
  };
  return result;
};
